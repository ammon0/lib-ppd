

##############################################################################
#                                OBJECT
##############################################################################


# an instance of Class called Object
# being the root of the superClass tree, Object has no superClass
Class Object{
	(Class) superClass IS nil
	methodDictionary
	instanceSpec
	(Set(Class))subClasses IS {Class Magnitude Collection}
	(String) instanceVariables IS nil # no guaranteed fields in all objects
	(String) name IS "Object"
	(String) comment IS ""
	
	
METHODS
	
	# error handling
	#error: aString
	() doesNotUnderstand (aMessage){
		
	}
	
	() primativeFailed(){
		
	}
	
	() subclassResponsibility(){
		
	}
	
	() shouldNotImplement(){
		
	}
	
	########################### TEST FUNCTIONALITY #############################
	
	(Class) type() { PRIMATIVE TYPE } # TYPE never fails
	
	(Bool) isKindOf  ((Class)aClass) {
		TEMP receiverType
		
		# get the receiverType
		PUSHR
		SEND 0 "type"
		STORET 0
		
		# receiverType is still on top of the stack
		PUSHA 0
		SEND 1 "=="
		
	}
	(Bool) isMemberOf((Class)aClass) {}
	(Bool) respondsTo((Symbol)aSymbol) {}
	
	############################### COMPARE TO #################################
	
	(Bool) == ((Object) anObject){  # identity
		PRIMATIVE EQ
	}
	
	(Bool) = ((Object) anObject){  # equivalency
		# first test if we are the same or equivalent class
		# test if we are the same length
		# iterate over each field and test equality
	}
	
	hash () {}
	
	################################# COPYING ##################################
	
	(Object) shallowCopy(){
		PRIMATIVE COPY
		# COPY fails if out of memory
	}
	
	(Object) deepCopy (){
		# do a shallow copy first
		# recursively do a deep copy of each field
	}
	
	# accessing
	(Object) getIndex (index){ # all objects are just arrays
		PRIMATIVE GET
		# GET may fail if the index is out of bounds
	}
	
	(Object) setIndex (index value){
		PRIMATIVE SET #set may fail if the index is out of bounds
	}
	
	(uint) size(){
		PRIMATIVE SIZE # SIZE does not fail
	}
	
	# printing
	(String) toString() {
		TEMP (String) string
		TEMP (Class) type
		
		PUSHT 0        # push String onto the stack
		SEND  1 "new" # send "new" to String
	}
}


